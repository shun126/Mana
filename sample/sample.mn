/*
mana (script)
Copyright (c) 2003 Shun Moriya <shun@mnu.sakura.ne.jp>
*/

// structs declarations
struct TestStruct
{
	float realValue;
	int digitValue;
	string stringValue;
	Actor actorValue;
}

// static variables
static allocate 10
{
	float staticRealValue;
}

static
{
	int staticDigitValue;
}


// global variables
float realValue;
int digitValue;
TestStruct structValue;

void test()
{
	// Forward declaration
	short array[10];
	print("test_sort: %d\n", test_sort(array, 10));

	// Forward declaration
	test_switch_while();
}

int test_sort(short array[10], int size)
{
	print("before\n");
	for(int i = 0; i < size; i++)
	{
		array[i] = size - i;
		print("%d: %d\n", i, array[i]);
	}

	int count = 0;
	int finish;
	do{
		finish = true;
		for(int i = 0; i < size - 1; i++)
		{
			if(array[i] > array[i + 1])
			{
				short tmp = array[i];
				array[i] = array[i + 1];
				array[i + 1] = tmp;
				finish = false;
			}
		}
		count++;
	}while(!finish);

	print("after\n");
	for(int i = 0; i < size; i++)
	{
		print("%d: %d\n", i, array[i]);
	}

	return count;
}

void test_switch_while()
{
	int count = 4;
	while(count)
	{
		switch(count)
		{
		case 1:
			print("one\n");
			break;
		case 2:
			print("two\n");
			break;
		case 3:
			print("three\n");
			break;
		default:
			print("ready\n");
		}
		count--;
	}
}

// actor declarations
actor TestActor
{
	int digitVariableInActor;

	// actor defines
	action init
	{
		short array[10];
		print("test_sort: %d\n", test_sort(array, 10));

		int localVariableInAction;
		float arrayTest[10];

		test_switch_while();

		staticDigitValue = 1;

		pointer p;
		pointer q;
		p = getUserPointer();
		q = p;
		setUserPointer(p);
	}

	action main
	{
		request(1, OtherTestActor::talk);	// Forward declaration
		request(2, OtherTestActor, "talk");	// Forward declaration
		request(5, self::talk);
		join(0, OtherTestActor);
	}

	action talk
	{
		vec2 test;
		test.x = 0;
		print("Nin hao!\n");
	}
}

actor OtherTestActor
{
	action talk
	{
		vec2 test;
		float f;
		f = test.x;
		print("Hello!\n");
		yield();
		getUserData();
	}
}


module Battle
{
	action init
	{
	}
}

phantom Aa
{
	action init
	{
	}
}

actor Director
{
	extend Battle;
}
